../Screenshots/Mapping_your_applications/Slide01.jpg,00:06
#Mapping your applications in app dynamics
#
../Screenshots/Mapping_your_applications/Slide02.jpg,00:20
#One of the first things to do as you prepare to deploy AppDynamics is to decide how you’ll map your applications in the product. After watching this video, you will be able to map your applications in a way that your team will get the most out of AppDynamics.
../Screenshots/Mapping_your_applications/Slide03.jpg,00:32
#Let’s start with the definition…What is an application in AppDynamics?  AppDynamics’ definition of an application may be different from how you recognize your applications.
../Screenshots/Mapping_your_applications/Slide04.jpg,00:39
#AppDynamics recognizes your application in an hierarchical structure of Application, Tier, and Node.
../Screenshots/Mapping_your_applications/Slide05.jpg,00:51
#What we call an Application in AppDynamics is a complete, distributed business application rather than a single deployment of code. It usually maps to what you would refer to as a site in your company.
../Screenshots/Mapping_your_applications/Slide06.jpg,00:57
#A Tier in AppDynamics is simply a cluster of nodes all performing the same function,
../Screenshots/Mapping_your_applications/Slide07.jpg,01:02
#and a node is mapped to a single JVM or .Net application. ]
#
../Screenshots/temp3.9/Dashboard01-11.jpg,01:12
#Applications, tiers and nodes are all named manually during the application’s initial setup, so it’s important to give them clear, descriptive and familiar names at the outset.
#
../Screenshots/Mapping_your_applications/Slide08.jpg,01:25
#Let’s use an example and see how we would map this sample travel agency application AppDynamics. They have three websites: Flights.com, Lodging.com, and Cruises.com.
#
../Screenshots/Mapping_your_applications/Slide09.jpg,01:43
#Andclet’shsay/here’sganotherpserviceohandling1allpthe1credithcardeprocessing.hSoenoematter.which’site yourncustomerseareeon,cwhenhtheytpayeforttheirvpurchases theyharevusingiaisharedtpurchasingiengine.lHowiwouldayoutmodelrthissin AppDynamics?by the inventory service using a single database.
../Screenshots/Mapping_your_applications/Slide11.jpg,02:05
#In AppDynamics these units you see are mapped as tiers, because they are each simply a group of nodes running the same code and performing the same work.
#
../Screenshots/Mapping_your_applications/Slide12.jpg,02:12
#And all of these units should be part of ONE AppDynamics application.
#
../Screenshots/Mapping_your_applications/Slide13.jpg,02:24
#Since most of the transactions have to go through these services and databases, we need to be able to follow the traffic flow into all these components in order to gain full visibility into your sties’ performance.
#
../Screenshots/Mapping_your_applications/Slide14.jpg,02:33
#If you can follow the traffic flow between these tiers and monitor their response times, load, error rate and correlate the data,
#
../Screenshots/Mapping_your_applications/Slide15.jpg,02:48
#you can easily troubleshoot and identify the root cause of an issue, and the extent of its effect.  And since the traffic flow will be organized in a meaningful units such as “purchase tickets” and “flight search”, you get a better understanding of your customers’ experiences.
#
../Screenshots/Mapping_your_applications/Slide16.jpg,03:04
#What if you mapped each of these components as a separate AppDynamics Application, and then model each of the Back-End services as its own AppDynamics application as well.  This may seem to be more intuitive initially if different teams are building each of those.
#
../Screenshots/Mapping_your_applications/Slide17.jpg,03:29
#However, the problem here is that it’s so much easier to troubleshoot when these are bundled together as an application.  Visibility of cross-application traffic flow is limited, so the person who is trying to troubleshoot a problem in the credit card processing service may not get the complete set of data about the origin of the traffic.  You may see only some credit card transactions are stalled, but what are the common factors about those?  You may not know.
#
../Screenshots/Mapping_your_applications/Slide12.jpg,03:38
#So let’s make sure all servers that are interconnected and that communicate with each other belong in one AppDynamics application.
#
../Screenshots/Mapping_your_applications/Slide18.jpg,03:54
#Now here’s a case where monitoring application separately makes sense.  Let’s say your organization has a  human resources management application too, and this does not share any resources with your travel applications.  Then of course they should be mapped as separate applications.
#
../Screenshots/Mapping_your_applications/Slide19.jpg,04:12
#Or how about this case… our travel booking sites of course have the production sites and test sites.  Should we bundle the test and production together as one application?  No.  production application and test application don’t communicate with each other so we want to keep them separate.
#
../Screenshots/Mapping_your_applications/Slide20.jpg,04:19
#Let’s take a look at a real life example.  We are going to view an application mapped in AppDynamics Controller.
#
../Screenshots/01-application_dashboard/Home01-2.jpg,04:31
#Here you’re looking at the AppDynamics user interface. From the home screen, you can see that two applications are currently being monitored.	We are going to drill down into one of them.
#
../Screenshots/temp3.9/Dashboard01-1.jpg,04:37
#Now we are looking at the application dashboard.  The flowmap represents your application’s structure.
#
../Screenshots/temp3.9/Dashboard01-2.jpg,04:46
#Each of THESE symbols represents a single Tier. And again, as we discussed, a tier is simply a set of nodes that are all performing the same work in a cluster.
#
../Screenshots/temp3.9/Dashboard04-1.jpg,04:52
#When you zoom in, you can view how many nodes there are under each tier.
#
../Screenshots/temp3.9/Dashboard05-1.jpg,04:59
#You can also click on any of the tiers to see details about its performance and a list of all its nodes.
#
../Screenshots/temp3.9/Dashboard04-1.jpg,05:01
#So you see the tier structure in this sample application resembles the travel sites example we have discussed.  
#
../Screenshots/temp3.9/Dashboard01-11.jpg,05:20
#Commerce, inventory and card processing functionalities are bundled together as an application, as these tiers are communicating with each other and accessing the shared Back-Ends like DATABASES, MESSAGE QUEUES and other services.
../Screenshots/Mapping_your_applications/Slide05.jpg,05:28
#So, by mapping the entire distributed business application into one AppDynamics application, we can see the whole lifecycle of its transactions.
#
../Screenshots/Mapping_your_applications/Slide21.jpg,05:32
#When you see your processing tier suffers a sudden slowness, 
#
../Screenshots/Mapping_your_applications/Slide22.jpg,05:36
#you don’t just wonder whether the ecommerce transaction count has spiked up. 
#
../Screenshots/Mapping_your_applications/Slide23.jpg,05:40
#You can check the load to that tier immediately yourself.
#
../Screenshots/Mapping_your_applications/Slide24.jpg,05:51
#If we had monitored each tier separately or just left some tiers out of our application, we would lose correlation between the tiers and a lot of important performance and troubleshooting information as well.
#
../Screenshots/09-website/University01-1.jpg,06:04
#We hope this has helped you think about how to map out your applications in AppDynamics and to see the importance of doing it upfront. We thank you for watching this video and hope you look forward to seeing more videos from the AppDynamics University.
#
../Audio/Mapping_your_applications.mp3

